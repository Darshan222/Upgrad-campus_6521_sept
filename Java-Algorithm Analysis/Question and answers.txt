1. Reverse a String using Recursion
Code:
public class ReverseString {

    public static String reverseString(String s) {
        if (s.isEmpty()) {
            return s;
        } else {
            return reverseString(s.substring(1)) + s.charAt(0);
        }
    }

    public static void main(String[] args) {
        String inputStr = "hello";
        String reversedStr = reverseString(inputStr);
        System.out.println("Reversed String: " + reversedStr);
    }
}
Time Complexity: O(n) - linear time, where n is the length of the input string.
Space Complexity: O(n) - linear space due to the recursion stack.


2. Sum of Digits using Recursion
Code:
public class SumOfDigits {

    public static int sumOfDigits(int n) {
        if (n == 0) {
            return 0;
        } else {
            return n % 10 + sumOfDigits(n / 10);
        }
    }

    public static void main(String[] args) {
        int num = 12345;
        int digitSum = sumOfDigits(num);
        System.out.println("Sum of Digits: " + digitSum);
    }
}
Time Complexity: O(log n) - logarithmic time, where n is the input number.
Space Complexity: O(log n) - logarithmic space due to the recursion stack.


3. Factorial Calculation using Recursion
Code:
public class Factorial {

    public static int factorial(int n) {
        if (n == 0 || n == 1) {
            return 1;
        } else {
            return n * factorial(n - 1);
        }
    }

    public static void main(String[] args) {
        int num = 5;
        int result = factorial(num);
        System.out.println("Factorial: " + result);
    }
}
Time Complexity: O(n) - linear time, where n is the input number.
Space Complexity: O(n) - linear space due to the recursion stack.


4. Tower of Hanoi using Recursion
Code:
public class TowerOfHanoi {

    public static void towerOfHanoi(int n, char source, char target, char auxiliary) {
        if (n > 0) {
            towerOfHanoi(n - 1, source, auxiliary, target);
            System.out.println("Move disk " + n + " from " + source + " to " + target);
            towerOfHanoi(n - 1, auxiliary, target, source);
        }
    }

    public static void main(String[] args) {
        int numDisks = 3;
        towerOfHanoi(numDisks, 'A', 'C', 'B');
    }
}
Time Complexity: O(2^n) - exponential time, where n is the number of disks.
Space Complexity: O(n) - linear space due to the recursion stack.


5. Binary Search using Recursion
Code:
public class BinarySearch {

    public static int binarySearch(int[] arr, int low, int high, int target) {
        if (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                return binarySearch(arr, mid + 1, high, target);
            } else {
                return binarySearch(arr, low, mid - 1, target);
            }
        }
        return -1; // Element not found
    }

    public static void main(String[] args) {
        int[] sortedArray = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        int target = 6;
        int result = binarySearch(sortedArray, 0, sortedArray.length - 1, target);
        System.out.println("Index of " + target + ": " + result);
    }
}
Time Complexity: O(log n) - logarithmic time, where n is the size of the sorted array.
Space Complexity: O(log n) - logarithmic space due to the recursion stack.