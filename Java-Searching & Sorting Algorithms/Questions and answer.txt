1. Find Minimum and Maximum
Problem:
Given an array of integers, implement a function to find the minimum and maximum elements in the array.
Code:
import java.util.Arrays;

public class MinMaxFinder {

    public static void findMinMax(int[] arr) {
        Arrays.sort(arr);
        int min = arr[0];
        int max = arr[arr.length - 1];
        System.out.println("Minimum: " + min);
        System.out.println("Maximum: " + max);
    }

    public static void main(String[] args) {
        int[] array = {5, 2, 8, 1, 9, 3};
        findMinMax(array);
    }
}


2. Counting Sort
Problem:
Implement the Counting Sort algorithm to sort an array of integers where the elements are in a specific range.
Code:
public class CountingSort {

    public static void countingSort(int[] arr) {
        int max = Arrays.stream(arr).max().orElse(0);
        int[] count = new int[max + 1];
        int[] result = new int[arr.length];

        for (int num : arr) {
            count[num]++;
        }

        int k = 0;
        for (int i = 0; i <= max; i++) {
            while (count[i] > 0) {
                result[k] = i;
                k++;
                count[i]--;
            }
        }

        System.arraycopy(result, 0, arr, 0, arr.length);
    }

    public static void main(String[] args) {
        int[] array = {5, 2, 8, 1, 9, 3};
        System.out.println("Before sorting: " + Arrays.toString(array));
        countingSort(array);
        System.out.println("After sorting: " + Arrays.toString(array));
    }
}


3. Search in Rotated Sorted Array
Problem:
Given a rotated sorted array, implement a function to search for a target element.
public class RotatedSortedArraySearch {

    public static int search(int[] arr, int target) {
        int low = 0;
        int high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return mid;
            }

            if (arr[low] <= arr[mid]) {
                if (target >= arr[low] && target < arr[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if (target > arr[mid] && target <= arr[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }

        return -1; // Element not found
    }

    public static void main(String[] args) {
        int[] rotatedArray = {4, 5, 6, 7, 0, 1, 2};
        int target = 0;
        int result = search(rotatedArray, target);
        System.out.println("Index of " + target + ": " + result);
    }
}


4. Intersection of Two Arrays
Problem:
Given two arrays, implement a function to find their intersection.
Code:
import java.util.HashSet;
import java.util.Set;

public class IntersectionOfArrays {

    public static int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set1 = new HashSet<>();
        Set<Integer> set2 = new HashSet<>();

        for (int num : nums1) {
            set1.add(num);
        }

        for (int num : nums2) {
            if (set1.contains(num)) {
                set2.add(num);
            }
        }

        int[] result = new int[set2.size()];
        int i = 0;
        for (int num : set2) {
            result[i] = num;
            i++;
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums1 = {4, 9, 5};
        int[] nums2 = {9, 4, 9, 8, 4};
        int[] result = intersection(nums1, nums2);
        System.out.println("Intersection: " + Arrays.toString(result));
    }
}


5. Implement Quicksort
Problem:
Implement the Quicksort algorithm to sort an array of integers.
Code:
import java.util.Arrays;

public class QuickSort {

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int partitionIndex = partition(arr, low, high);
            quickSort(arr, low, partitionIndex - 1);
            quickSort(arr, partitionIndex + 1, high);
        }
    }

    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] <= pivot) {
                i++;
                // Swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }

        // Swap arr[i+1] and arr[high] to place the pivot at its correct position
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;

        return i + 1;
    }

    public static void main(String[] args) {
        int[] array = {5, 2, 8, 1, 9, 3};
        System.out.println("Before sorting: " + Arrays.toString(array));
        quickSort(array, 0, array.length - 1);
        System.out.println("After sorting: " + Arrays.toString(array));
    }
}